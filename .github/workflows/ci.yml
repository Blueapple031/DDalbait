name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality & Testing
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Run linting
        run: yarn lint
        
      - name: Run type checking
        run: yarn type-check
        
      - name: Run tests
        run: yarn test
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: success()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  # Build & Security Scan
  build:
    name: Build & Security
    runs-on: ubuntu-latest
    needs: test
    
    strategy:
      matrix:
        app: [api, web]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          
      - name: Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: Build application
        run: |
          if [ "${{ matrix.app }}" == "api" ]; then
            yarn workspace @hoops-platform/api build
          elif [ "${{ matrix.app }}" == "web" ]; then
            yarn workspace @hoops-platform/web build
          fi
          
      - name: Run security audit
        run: yarn audit --level moderate
        continue-on-error: true

  # Docker Build & Push
  docker:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        app: [api, web]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: |
            ${{ matrix.app == 'api' && 'services/api/Dockerfile' || 'apps/web/Dockerfile' }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # TODO: Add deployment commands for staging
          
  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # TODO: Add deployment commands for production

  # Notify on Success/Failure
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, build, docker]
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.test.result == 'success' && needs.build.result == 'success' }}
        run: echo "üéâ All checks passed!"
        
      - name: Notify failure
        if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' }}
        run: echo "‚ùå Some checks failed!" 